{"version":3,"sources":["data/RadioStations.jsx","img/hot_fm.png","img/iwave_fm.png","img/radio_phoenix.png","img/sun_fm.jpg","img/breeze_fm.jpg","img/radio_chikuni.jpg","img/rock_fm.jpg","img/christian_voice.webp","radio/Radio.js","pages/LandingPage.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["RadioStations","name","urls","icon","id","Radio","ERRORS","currentStationID","currentSound","isPlaying","playing","this","playSound","sound","a","play","Promise","resolve","reject","once","error","radioStation","unload","Howl","src","html5","preload","pause","stop","LandingPage","useState","radio","setRadio","setPlaying","loading","setLoading","setRadioStation","useEffect","console","debug","handlePlay","className","Spinner","animation","role","map","rs","index","Card","onClick","Header","Body","Img","Button","variant","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6ab4d8ac.chunk.js","sourcesContent":["import HotFmIcon from '../img/hot_fm.png';\nimport iWaveFmIcon from '../img/iwave_fm.png';\nimport phoenixFmIcon from '../img/radio_phoenix.png';\nimport sunFmIcon from '../img/sun_fm.jpg';\nimport breezeFmIcon from '../img/breeze_fm.jpg';\nimport radioChikuniIcon from '../img/radio_chikuni.jpg';\nimport rockFmIcon from '../img/rock_fm.jpg';\nimport christianVoiceIcon from '../img/christian_voice.webp'\n\nconst RadioStations = [\n    {\n        name: \"HOT FM\",\n        urls: [\n            \"http://s2.yesstreaming.net:7091/stream\"\n        ],\n        icon: HotFmIcon,\n        id: 0\n    },\n    {\n        name: \"IWave FM Radio\",\n        urls: [\n            \"http://s47.myradiostream.com:9934/listen.mp3\"\n        ],\n        icon: iWaveFmIcon,\n        id: 1,\n    },\n    {\n        name: \"Radio Phoenix 89.5\",\n        urls: [\n            \"https://23553.live.streamtheworld.com/RADIO_PHOENIXAAC_SC\"\n        ],\n        icon: phoenixFmIcon,\n        id: 2,\n    },\n    {\n        name: \"Sun FM\",\n        urls: [\n            \"http://11233.cloudrad.io:9102/live\"\n        ],\n        icon: sunFmIcon,\n        id: 3,\n    },\n    {\n        name: \"Breeze FM Chipata\",\n        urls: [\n            \"https://s47.myradiostream.com/9934/listen.mp3\"\n        ],\n        icon: breezeFmIcon,\n        id: 4,\n    },\n    {\n        name: \"Radio Chikuni\",\n        urls: [\n            \"http://centauri.shoutca.st:8102/stream\"\n        ],\n        icon: radioChikuniIcon,\n        id: 5,\n    },\n    {\n        name: \"965 Rock FM\",\n        urls: [\n            \"http://99.198.118.250:8238/stream\"\n        ],\n        icon: rockFmIcon,\n        id: 6,\n    },\n    {\n        name: \"Radio Christian Voice\",\n        urls: [\n            \"http://zas2.ndx.co.za/proxy/cvglobal?mp=/stream\"\n        ],\n        icon: christianVoiceIcon,\n        id: 7,\n    }\n];\n\nexport default RadioStations;","export default __webpack_public_path__ + \"static/media/hot_fm.572a6cfd.png\";","export default __webpack_public_path__ + \"static/media/iwave_fm.73d51dfc.png\";","export default __webpack_public_path__ + \"static/media/radio_phoenix.7376b7f6.png\";","export default __webpack_public_path__ + \"static/media/sun_fm.b0101ebe.jpg\";","export default __webpack_public_path__ + \"static/media/breeze_fm.b2b306be.jpg\";","export default __webpack_public_path__ + \"static/media/radio_chikuni.bddca254.jpg\";","export default __webpack_public_path__ + \"static/media/rock_fm.0c381a41.jpg\";","export default __webpack_public_path__ + \"static/media/christian_voice.f2229b0c.webp\";","import { Howl } from 'howler';\n\n/*TODO \n1 SEND OUT EVENT ON PLAYBACK ERROR AFTER INITIAL SUCCESS. \n2 ON ERROR, SEND OUT AN EMAIL WITH DETAIL\n*/\nfunction Radio() {\n    const ERRORS = {\n        NETWORK_ERROR: \"NETWORK ERROR\",\n        LOAD_ERROR: \"LOAD ERROR\"\n    }\n    let currentStationID = null;\n    let currentSound = null;\n\n    const isPlaying = () => {\n        return currentSound && currentSound.playing();\n    };\n    this.isPlaying = isPlaying;\n\n    const playSound = async (sound) => {\n        sound.play();\n\n        /*currentSound.on('stop', () => {\n            console.debug(\"cwm on volume\");\n        })*/\n\n        return new Promise((resolve, reject) => {\n            sound.once('play', () => {\n                resolve(true);\n            });\n\n            sound.once('loaderror', (id, error) => {\n                reject(ERRORS.LOAD_ERROR, error);\n            });\n        })\n    };\n\n    const play = async (radioStation) => {\n        if (currentStationID === radioStation.id) {\n            if (!isPlaying()) {\n                return playSound(currentSound);\n            }\n        }\n        else {\n            currentStationID = radioStation.id;\n            if (currentSound) {\n                currentSound.unload();\n            }\n\n            currentSound = new Howl({\n                src: [radioStation.urls],\n                html5: true,\n                preload: false\n            });\n\n            return playSound(currentSound);\n        }\n    }\n    this.play = play;\n\n    const pause = () => {\n        if (currentSound) {\n            currentSound.stop();\n        }\n    }\n    this.pause = pause;\n}\n\nexport default Radio;","import { Spinner, Button, Card } from 'react-bootstrap';\nimport { Fragment, useEffect, useState } from 'react';\nimport RadioStations from '../data/RadioStations';\nimport Radio from '../radio/Radio';\nimport { MdUndo, MdRedo, MdOutlinePlayArrow, MdOutlinePause, MdOutlineHeadphones } from 'react-icons/md';\nconst LandingPage = () => {\n    const [radio, setRadio] = useState(null);\n    const [playing, setPlaying] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [radioStation, setRadioStation] = useState(null);\n\n    useEffect(() => {\n        setRadioStation(RadioStations[0]);\n        console.debug(\"cwm - \", RadioStations[0]);\n        setRadio(new Radio());\n    }, []);\n\n    const handlePlay = async (radioStation) => {\n        setRadioStation(radioStation);\n        setLoading(true);\n        try {\n            await radio.play(radioStation);\n            setPlaying(true);\n        }\n        catch (error) {\n            console.error(\"cwm playback error-\", error);\n        }\n        finally {\n            setLoading(false);\n        }\n    }\n\n    return <>\n        <div className=\"media-player-container\">\n            <div className=\"media-header\">\n                {loading && <>  <Spinner animation=\"border\" role=\"status\" />&nbsp; </>}\n                <span>{radioStation && radioStation.name}</span>\n            </div>\n            <div className=\"media-content\">\n                {RadioStations.map((rs, index) => {\n                    return <Card\n                        key={index} className={(radioStation && rs.id === radioStation.id) ? \"current-station shadow\" : \"\"}\n                        onClick={() => handlePlay(rs)}\n                    >\n                        <Card.Header className=\"text-center\">\n                            <span>{rs.name}</span>\n                            {((radioStation && rs.id === radioStation.id) && playing) && <>&nbsp;<MdOutlineHeadphones /> </>}\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Img src={rs.icon} />\n                        </Card.Body>\n                    </Card>\n                })}\n            </div>\n            <div className=\"media-controls-container\">\n                <Button className=\"media-control\" variant=\"dark\">\n                    <MdUndo />\n                </Button>\n\n                <Fragment>\n\n                    {loading ? <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner> :\n                        <Button className=\"media-control\" variant=\"dark\"\n                            onClick={\n\n                                () => {\n                                    if (radio) {\n                                        if (radio.isPlaying()) {\n                                            radio.pause();\n                                            setPlaying(false);\n                                        }\n                                        else {\n                                            handlePlay(radioStation);\n                                        }\n                                    }\n                                }\n                            }>\n                            {playing && <MdOutlinePause />}\n                            {!playing && <MdOutlinePlayArrow />}\n                        </Button>\n                    }\n                </Fragment>\n\n                <Button className=\"media-control\" variant=\"dark\">\n                    <MdRedo />\n                </Button>\n            </div>\n        </div>\n    </>;\n}\n\nexport default LandingPage;","//import './App.css';\nimport LandingPage from './pages/LandingPage';\nimport './styles/main.scss';\n\nfunction App() {\n  return <LandingPage />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}